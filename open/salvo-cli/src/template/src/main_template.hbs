{{#if is_sea_orm_or_sqlx}}
use crate::db::init_db_conn;
{{/if}}
{{#if is_rbatis}}
use crate::db::init_db_conn;
{{/if}}
{{#if is_mongodb}}
use crate::db::init_db_conn;
{{/if}}
use crate::middleware::handle_404::handle_404;
use crate::routers::router;
use config::{CERT_KEY, CFG};
use salvo::catcher::Catcher;
use salvo::conn::rustls::{Keycert, RustlsConfig};
use salvo::prelude::*;
mod app_error;
{{#if need_db_conn}}
{{else}}
#[allow(dead_code)]
{{/if}}
mod app_response;
mod config;
{{#if need_db_conn}}
mod db;
mod dtos;
mod services;
mod utils;
{{/if}}
{{#if is_sea_orm_or_sqlx}}
mod entities;
{{/if}}
{{#if is_mongodb}}
mod entities;
{{/if}}
{{#if is_diesel}}
mod models;
mod schema;
{{/if}}
{{#if is_rbatis}}
mod entities;
{{/if}}
mod middleware;
mod routers;

#[tokio::main]
async fn main() {
    //{{main_log_message}}
    init_log();
    {{#if is_sea_orm_or_sqlx}}
    init_db_conn().await;
    {{/if}}
    {{#if is_rbatis}}
    init_db_conn().await;
    {{/if}}
    {{#if is_mongodb}}
    init_db_conn().await;
    {{/if}}
    let router = router();
    let service: Service = router.into();
    let service = service.catcher(Catcher::default().hoop(handle_404));
    println!("🌪️ {} {{is_starting}} ", &CFG.server.name);
    println!("🔄 {{listen_on}} {}", &CFG.server.address);

    match CFG.server.ssl {
        true => {
            println!(
                "📖 {{swagger_api_page}}: https://{}/swagger-ui",
                &CFG.server.address.replace("0.0.0.0", "127.0.0.1")
            );
            {{#if is_web_site}}
            {{#if need_db_conn}}
            println!("🔑 {{login_page}}: https://{}/login", &CFG.server.address.replace("0.0.0.0", "127.0.0.1"));
            {{/if}}
            {{/if}}
            let config = RustlsConfig::new(
                Keycert::new()
                    .cert(CERT_KEY.cert.clone())
                    .key(CERT_KEY.key.clone()),
            );
            let acceptor = TcpListener::new(&CFG.server.address)
                .rustls(config)
                .bind()
                .await;
            let server = Server::new(acceptor);
            let handle = server.handle();
            server.serve(service).await;
            handle.stop_graceful(std::time::Duration::from_secs(5));

        }
        false => {
            println!(
                "📖 {{swagger_api_page}}: http://{}/swagger-ui",
                &CFG.server.address.replace("0.0.0.0", "127.0.0.1")
            );
            {{#if is_web_site}}
            {{#if need_db_conn}}
            println!("🔑 {{login_page}}: http://{}/login", &CFG.server.address.replace("0.0.0.0", "127.0.0.1"));
            {{/if}}
            {{/if}}
            let acceptor = TcpListener::new(&CFG.server.address).bind().await;
            let server = Server::new(acceptor);
            let handle = server.handle();
            server.serve(service).await;
            handle.stop_graceful(std::time::Duration::from_secs(5));        }
    };
}

fn init_log() {
    let _guard = clia_tracing_config::build()
        .filter_level(&CFG.log.filter_level)
        .with_ansi(CFG.log.with_ansi)
        .to_stdout(CFG.log.to_stdout)
        .directory(&CFG.log.directory)
        .file_name(&CFG.log.file_name)
        .rolling(&CFG.log.rolling)
        .init();
    tracing::info!("log level: {}", &CFG.log.filter_level);
}
#[cfg(test)]
mod tests {
    use salvo::prelude::*;
    use salvo::test::{ResponseExt, TestClient};

    use crate::config::CFG;

    #[tokio::test]
    async fn test_hello_world() {
        let service = Service::new(super::router());

        let content = TestClient::get(format!(
            "http://{}",
            &CFG.server.address.replace("0.0.0.0", "127.0.0.1")
        ))
        .send(&service)
        .await
        .take_string()
        .await
        .unwrap();
        assert_eq!(content, "Hello World from salvo");
    }
}
