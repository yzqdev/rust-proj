<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>salvo</title>
  </head>
  <body id="body">
    <div x-data="loginForm()">
      <template x-if="!isLoggedIn">
        <div
          class="flex min-h-full items-center justify-center py-12 px-4 sm:px-6 lg:px-8"
        >
          <div class="w-full max-w-md space-y-8">
            <div>
              <h2
                class="mt-6 text-center text-3xl font-bold tracking-tight text-gray-900"
              >
                {{login}}
              </h2>
            </div>
            <form class="mt-8 space-y-6" @submit.prevent="submit">
              <input type="hidden" name="remember" value="true" />
              <div class="-space-y-px rounded-md shadow-sm">
                <div>
                  <label for="username" class="sr-only">{{username}}</label>
                  <input
                    x-model="username"
                    type="text"
                    autocomplete="username"
                    required
                    class="relative block w-full appearance-none rounded-none rounded-t-md border border-gray-300 px-3 py-2 text-gray-900 placeholder-gray-500 focus:z-10 focus:border-sky-500 focus:outline-none focus:ring-sky-500 sm:text-sm"
                    placeholder="{{username}}"
                  />
                </div>
                <div>
                  <label for="password" class="sr-only">{{password}}</label>
                  <input
                    x-model="password"
                    type="password"
                    autocomplete="current-password"
                    required
                    class="relative block w-full appearance-none rounded-none rounded-b-md border border-gray-300 px-3 py-2 text-gray-900 placeholder-gray-500 focus:z-10 focus:border-sky-500 focus:outline-none focus:ring-sky-500 sm:text-sm"
                    placeholder="{{password}}"
                  />
                </div>
              </div>
              <div>
                <button
                  type="submit"
                  class="group relative flex w-full justify-center rounded-md border border-transparent bg-sky-600 py-2 px-4 text-sm font-medium text-white hover:bg-sky-700 focus:outline-none focus:ring-2 focus:ring-sky-500 focus:ring-offset-2"
                >
                  <span
                    class="absolute inset-y-0 left-0 flex items-center pl-3"
                  >
                    <svg
                      class="h-5 w-5 text-sky-500 group-hover:text-sky-400"
                      xmlns="http://www.w3.org/2000/svg"
                      viewBox="0 0 20 20"
                      fill="currentColor"
                      aria-hidden="true"
                    >
                      <path
                        fill-rule="evenodd"
                        d="M10 1a4.5 4.5 0 00-4.5 4.5V9H5a2 2 0 00-2 2v6a2 2 0 002 2h10a2 2 0 002-2v-6a2 2 0 00-2-2h-.5V5.5A4.5 4.5 0 0010 1zm3 8V5.5a3 3 0 10-6 0V9h6z"
                        clip-rule="evenodd"
                      />
                    </svg>
                  </span>
                    {{login}}
                </button>
              </div>
            </form>
          </div>
        </div>
      </template>
      <template x-if="isLoggedIn">
        <div x-html="userList"></div>
      </template>
    </div>
  </body>
  <script src="assets/js/tailwindcss.js"></script>
  <script src="assets/js/sweetalert2.js"></script>
  <script src="assets/js/alpinejs.js" defer></script>
  <script>
    function loginForm() {
      return {
        username: "",
        password: "",
        isLoggedIn: false,
        userList: "",
        async submit() {
          try {
            const response = await fetch("/api/login", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                username: this.username,
                password: this.password,
              }),
            });
            if (!response.ok) {
              const data = await response.json();
              throw new Error(`${data.msg}`);
            }
            this.isLoggedIn = true;
            const userListResponse = await fetch("/users", {
              headers: {
                "X-Fragment-Header": "true",
              },
            });
            this.userList = await userListResponse.text();
            history.pushState(null, '', '/users');
          } catch (error) {
            Swal.fire({
              title: "Error!",
              text: error.message,
              icon: "error",
              confirmButtonText: "OK",
            });
          }
        },
      };
    }
    function userForm() {
    return {
      users: [],
      fetchData() {
        fetch("/api/users")
          .then((response) => {
            if (!response.ok) {
              throw new Error("Network response was not ok");
            }
            return response.json();
          })
          .then((data) => {
            this.users = data.data;
          })
          .catch((error) => {
            console.error(
              "There has been a problem with your fetch operation:",
              error
            );
          });
      },
      addUser() {
        Swal.fire({
          title: "Add User",
          showCancelButton: true,
          html: `
    <input id="swal-input1" class="swal2-input" placeholder="username">
    <input id="swal-input2" class="swal2-input" placeholder="password">
    `,
          preConfirm: () => {
            return fetch("/api/users", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                username: document.getElementById("swal-input1").value,
                password: document.getElementById("swal-input2").value,
              }),
            })
              .then((response) => {
                if (!response.ok) {
                  throw new Error(response.statusText);
                }
                this.fetchData();
                return;
              })
              .catch((error) => {
                Swal.showValidationMessage(`Request failed: ${error}`);
              });
          },
          allowOutsideClick: () => !Swal.isLoading(),
        });
      },
      deleteUser(id) {
        Swal.fire({
          title: "Are you sure?",
          text: "You won't be able to revert this!",
          icon: "warning",
          showCancelButton: true,
          confirmButtonText: "Yes, delete it!",
          preConfirm: () => {
            return fetch(`/api/users/${id}`, {
              method: "DELETE",
            })
              .then((response) => {
                if (!response.ok) {
                  throw new Error(response.statusText);
                }
                this.fetchData();
                return;
              })
              .catch((error) => {
                Swal.showValidationMessage(`Request failed: ${error}`);
              });
          },
          allowOutsideClick: () => !Swal.isLoading(),
        }).then((result) => {});
      },
    };
  }
  </script>
</html>
